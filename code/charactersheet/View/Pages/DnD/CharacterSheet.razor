@page "/character/{CharacterId:int}"
@using Model.Entities
@using Domain.Repositories.Interfaces
@using System.Linq
@using Domain.Extensions
@attribute [Authorize]
@inject ICharacterRepository _characterRepository
@inject IRepository<ExperienceProficencyBonu> _experienceProfBonusRepository;
@inject NavigationManager _navigationManager
@inject DialogService DialogService

<RadzenDialog/>

<DataInitializer Data="Character">
<ChildComponent>
<form class="charsheet">
<header>
    <section class="charname">
        <label for="charname">Character Name</label>
        <input name="charname" value="@Character.Name" @onchange="args =>{Character.Name = args.Value.ToString(); UpdateCharacter();}"/>
    </section>
    <section class="misc">
        <ul>
            <li>
                <label for="classlevel">Class & Level</label>
                @if (ExperienceProficencyBonusList is not null){
                    <input name="classlevel" value="@Character.Class.Name @Level" disabled/>
                }
            </li>
            <li>
                <label for="background">Background</label>
                <input name="background" value="@Character.Background.Name" disabled/>
            </li>
            <li>
                <label for="playername">Player Name</label>
                <input name="playername" value="@Character.ApplicationUser.Email.Split('@')[0]" disabled>
            </li>
            <li>
                <label for="race">Race</label>
                <input name="race" value="@Character.Race.Name" disabled/>
            </li>
            <li>
                <label for="alignment">Alignment</label>
                <input name="alignment" value="@Character.Alignment" @onchange="args =>{Character.Alignment = args.Value.ToString(); UpdateCharacter();}"/>
            </li>
            <li>
                <label for="experiencepoints">Experience Points</label>
                <input name="experiencepoints" value="@Character.Xp" maxlength="9" @onchange="args =>{Character.Xp = Convert.ToInt32(args.Value); UpdateCharacter();}"/>
            </li>
        </ul>
    </section>
</header>

<main>
<section>
    <section class="attributes">
        <div class="scores">
            <ul>
                @foreach (var a in Character.Abilities.OrderBy(an => Array.IndexOf(DnDExtensions.AbilitiesSorted, an.Name))){
                    <li>
                        <div class="score">
                            <label for="@a.Name">@a.Name</label>
                            <input name="@a.Name" value="@a.AbilityScore.GetAbilityModifier().AddSign()" disabled/>
                        </div>
                        <div class="modifier">
                            <input value="@a.AbilityScore" maxlength="2" @onchange="args =>{Character.Abilities.SingleOrDefault(ac => ac.Name == a.Name).AbilityScore = Convert.ToInt32(args.Value); UpdateCharacter();}"/>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="attr-applications">
            <div class="inspiration box">
                <div class="label-container">
                    <label for="inspiration">Inspiration</label>
                </div>
                <input name="inspiration" type="checkbox" checked="@(Character.Inspiration == 1)" @onchange="args =>{Character.Inspiration = (Convert.ToBoolean(args.Value)) ? Convert.ToSByte(1) : Convert.ToSByte(0); UpdateCharacter();}"/>
            </div>
            <div class="proficiencybonus box">
                <div class="label-container">
                    <label for="proficiencybonus">Proficiency Bonus</label>
                </div>
                @if (ExperienceProficencyBonusList is not null){
                    <input name="proficiencybonus" value="+ @ProficiencyBonus" disabled/>
                }
            </div>
            <div class="saves list-section box">
                <ul>
                    @foreach (var savingThrow in Character.Abilities.OrderBy(an => Array.IndexOf(DnDExtensions.AbilitiesSorted, an.Name))){
                        <li>
                            <label for="@savingThrow.Name">@savingThrow.Name</label>
                            <input name="@savingThrow.Name" value="@savingThrow.ModifierWithPossibleProficiencyBonus(ProficiencyBonus).AddSign()" type="text" disabled/>
                            <input name="@savingThrow.Name-prof" type="checkbox" checked="@(savingThrow.Proficient == 1)" @onchange="@(args =>{ savingThrow.Proficient = (Convert.ToBoolean(args.Value)) ? Convert.ToSByte(1) : Convert.ToSByte(0); UpdateCharacter(); })"/>
                        </li>
                    }
                </ul>
                <div class="label">
                    Saving Throws
                </div>
            </div>
            <div class="skills list-section box">
                <ul>
                    @foreach (var ability in Character.Abilities.OrderBy(an => Array.IndexOf(DnDExtensions.AbilitiesSorted, an.Name))){
                        foreach (var skill in ability.Skills){
                            <li>
                                <label for="@skill.Name">
                                    @skill.Name<span class="skill"> (@ability.Name[..3])</span>
                                </label>
                                <input name="@skill.Name" value="@skill.ModifierWithPossibleProficiencyBonus(ProficiencyBonus).AddSign()" type="text" disabled/>
                                <input name="@skill.Name-prof" type="checkbox" checked="@(skill.Proficient == 1)" @onchange="@(args =>{ skill.Proficient = (Convert.ToBoolean(args.Value)) ? Convert.ToSByte(1) : Convert.ToSByte(0); UpdateCharacter(); })"/>
                            </li>
                        }
                    }
                </ul>
                <div class="label">
                    Skills
                </div>
            </div>
        </div>
    </section>
    <div class="passive-perception box">
        <div class="label-container">
            <label for="passiveperception">Passive Wisdom (Perception)</label>
        </div>
        <input name="passiveperception" value="@(10 + Character.Abilities.SingleOrDefault(a => a.Name == "WISDOM").Skills.SingleOrDefault(s => s.Name == "PERCEPTION").ModifierWithPossibleProficiencyBonus(ProficiencyBonus))" disabled/>
    </div>
    <div class="otherprofs box textblock">
        <label for="otherprofs">Other Proficiencies and Languages</label>
        @{
            string proficiencies = "<b>Languages:</b> " + string.Join(", ", Character.Languages.Select(l => l.Name).Concat(Character.Race.LanguageNames.Select(l => l.Name.FirstCharToUpper())));
            proficiencies += "<b>Armor Proficiencies:</b> " + string.Join(", ", Character.Class.ArmorTypes.Select(a => a.Label.FirstCharToUpper()));
            proficiencies += "<b>Weapon Proficiencies:</b> " + string.Join(", ", Character.Class.WeaponTypes.Select(w => w.Name.FirstCharToUpper()));
            
            <div class="textarea-to-div" style="height: 17em;">@((MarkupString)proficiencies)</div>
        }
    </div>
</section>
<section>
    <section class="combat">
        <div class="armorclass">
            <div>
                <label for="ac">Armor<br/>Class</label>
                <input name="ac" value="@Character.ArmorClass" type="text" @onchange="args =>{Character.ArmorClass = Convert.ToInt32(args.Value); UpdateCharacter();}"/>
            </div>
        </div>
        <div class="initiative">
            <div>
                <label for="initiative">Initiative</label>
                <input name="initiative" value="@Character.Abilities.SingleOrDefault(a => a.Name == "DEXTERITY").AbilityScore" type="text"/>
            </div>
        </div>
        <div class="speed">
            <div>
                <label for="speed">Speed</label>
                <input name="speed" value="@Character.Race.Speed" type="text"/>
            </div>
        </div>
        <div class="hp">
            <div class="regular">
                <div class="max">
                    <label for="maxhp">Hit Point Maximum</label>
                    <input name="maxhp" value="@Character.MaxHp" type="text" maxlength="9" @onchange="args =>{Character.MaxHp = Convert.ToInt32(args.Value); UpdateCharacter();}"/>
                </div>
                <div class="current">
                    <label for="currenthp">Current Hit Points</label>
                    <input name="currenthp" type="text" value="@Character.CurrentHp" maxlength="9" @onchange="args =>{Character.CurrentHp = Convert.ToInt32(args.Value); UpdateCharacter();}"/>
                </div>
            </div>
            <div class="temporary">
                <label for="temphp">Temporary Hit Points</label>
                <input name="temphp" type="text" value="@Character.TemporaryHp" maxlength="9" @onchange="args =>{Character.TemporaryHp = Convert.ToInt32(args.Value); UpdateCharacter();}"/>
            </div>
        </div>
        <div class="hitdice">
            <div>
                <div class="total">
                    <label for="totalhd">Total</label>
                    <input name="totalhd" value="@($"{Level}d{(Character.Class.HitDie)}")" type="text" disabled/>
                </div>
                <div class="remaining">
                    <label for="remaininghd">Hit Dice</label>
                    <input name="remaininghd" type="text" value="@(Character.HitDiceAmount)" @onchange="args => UpdateCharacterRemainingHitDice(Convert.ToInt32(args.Value))"/>
                </div>
            </div>
        </div>
        <div class="deathsaves">
            <div>
                <div class="label">
                    <label>Death Saves</label>
                </div>
                <div class="marks">
                    <div class="deathsuccesses">
                        <label>Successes</label>
                        <div class="bubbles">
                            @for (int i = 1; i <= 3; i++){
                                int x = i;
                                <input name="deathsuccess" type="checkbox" @onchange="@(args =>{ Character.DeathSaveSuccessCount = (Convert.ToBoolean(args.Value)) ? x : x - 1; UpdateCharacter(); })" checked="@(Character.DeathSaveSuccessCount >= x)"/>
                            }
                        </div>
                    </div>
                    <div class="deathfails">
                        <label>Failures</label>
                        <div class="bubbles">
                            @for (int i = 1; i <= 3; i++){
                                int x = i;
                                <input name="deathfail" type="checkbox" @onchange="@(args =>{ Character.DeathSaveFailureCount = (Convert.ToBoolean(args.Value)) ? x : x - 1; UpdateCharacter(); })" checked="@(Character.DeathSaveFailureCount >= x)"/>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="attacksandspellcasting">
        <div>
            <label>Attacks & Spellcasting</label>
            <table class="mb-3">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Atk Bonus</th>
                    <th>Damage/Type</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var chi in Character.CharactersHasItems){
                    if (chi.Item.Weapon is not null){
                        <tr>
                            <td>
                                <input name="atkname" type="text" value="@chi.Item.Name" disabled/>
                            </td>
                            <td>
                                <input name="atkbonus" type="text" value="@chi.Item.Weapon.GetAttackBonus(Character.Abilities, 2).AddSign()" disabled/>
                            </td>
                            <td>
                                <input name="atkdamage" type="text" value="@(chi.Item.Weapon.DamageDieAmount + "d" + chi.Item.Weapon.DamageDieType)" disabled/>
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
            <RadzenButton Text="Add weapon" ButtonStyle="ButtonStyle.Secondary" Click="OpenWeaponForm"/>
        </div>
    </section>
    <section class="equipment">
        <div>
            <label>Equipment</label>
            <div class="money">
                <ul>
                    @foreach (var coin in Coins){
                        <li>
                            <label for="coin">@coin.Key</label>
                            <input name="<%= type %>" value="@coin.Value" @onchange="args =>{Coins[coin.Key] = Convert.ToInt32(args.Value); Character.CopperCoins = Coins.MergeToCopperCoins(); UpdateCharacter();}"/>
                        </li>
                    }
                </ul>
            </div>
            @{
                string equipment = "";
                equipment += string.Join(", ", Character.CharactersHasItems.Select(i => i.Amount + "x " + i.Item.Name));
                
                <textarea placeholder="Equipment list here">@equipment</textarea>
            }
        </div>
    </section>
</section>
<section>
    <section class="flavor">
        <div class="personality">
            <label for="personality">Personality Traits</label>
            <textarea name="personality" @onchange="@(args =>{Character.PersonalityTraits().Description = args.Value.ToString(); UpdateCharacter();})">
                @Character.PersonalityTraits().Description
            </textarea>
        </div>
        <div class="ideals">
            <label for="ideals">Ideals</label>
            <textarea name="ideals" @onchange="@(args =>{Character.Ideals().Description = args.Value.ToString(); UpdateCharacter();})">
                @Character.Ideals().Description
            </textarea>
        </div>
        <div class="bonds">
            <label for="bonds">Bonds</label>
            <textarea name="bonds" @onchange="@(args =>{Character.Bonds().Description = args.Value.ToString(); UpdateCharacter();})">
                @Character.Bonds().Description
            </textarea>
        </div>
        <div class="flaws">
            <label for="flaws">Flaws</label>
            <textarea name="flaws" @onchange="@(args =>{Character.Flaws().Description = args.Value.ToString(); UpdateCharacter();})">
                @Character.Flaws().Description
            </textarea>
        </div>
    </section>
    <section class="features">
        <div>
            <label for="features">Features & Traits</label>
            @{
                string features = "";
            }
            @foreach (var trait in Character.Race.Traits){
                features += $"<h4>{trait.Label}</h4>";
                features += $"<p>{trait.Description}</p><br/>";
            }
            @foreach (var feature in Character.Class.Features){
                features += $"<h4>{feature.Label}</h4>";
                features += $"<p>{feature.Description}</p><br/>";
            }
            @{
                <div class="textarea-to-div">@((MarkupString)features)</div>
            }
        </div>
    </section>
</section>
</main>
</form>
</ChildComponent>
</DataInitializer>

@code {

    [Parameter]
    public int CharacterId { get; set; }

    private Character? Character { get; set; }

    public List<ExperienceProficencyBonu> ExperienceProficencyBonusList { get; set; }

    public Dictionary<string, int> Coins { get; set; }

    protected override async Task OnInitializedAsync(){
        ExperienceProficencyBonusList = await _experienceProfBonusRepository.ReadAsync();
    }

    protected override async Task OnParametersSetAsync(){
        Character = await _characterRepository.ReadGraphAsync(CharacterId);

        if (Character is null) return;

        var authState = await authStateTask;
        if (Character.ApplicationUser.UserName != authState.User.Identity.Name){
            _navigationManager.NavigateTo("/");
        }

        Coins = Character.CopperCoins.SplitCopperCoins();
    }

    private void UpdateCharacterRemainingHitDice(int newValue){
        Character.HitDiceAmount = newValue > Level ? ProficiencyBonus : newValue;
        UpdateCharacter();
    }

    private int Level => ExperienceProficencyBonusList.Last(e => Character.Xp >= e.Xp).Level;
    private int ProficiencyBonus => ExperienceProficencyBonusList.Last(e => Character.Xp >= e.Xp).ProficiencyBonus;

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }


    private void UpdateCharacter() => _characterRepository.UpdateAsync(Character);

    private async Task OpenWeaponForm(){
        await DialogService.OpenAsync<WeaponForm>($"WeaponForm",
            new Dictionary<string, object>(){ { "Character", Character } },
            new DialogOptions(){ Width = "30vw", Height = "70vh", Resizable = false, Draggable = false, CloseDialogOnOverlayClick = true });
        UpdateCharacter();
    }


}
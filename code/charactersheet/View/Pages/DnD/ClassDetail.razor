@page "/classes/{ClassName}"
@using Model.Entities
@using Domain.Repositories.Interfaces
@using Domain.Extensions
@inject IClassRepository _classRepository;

<DataInitializer Data="Class">
    <h2>@Class.Name</h2><hr/>
    <p>@Class.Description</p>
    <p>
        <b>Armor: </b>
        @if (Class.ArmorTypes.Count > 0) {
            @String.Join(", ", Class.ArmorTypes.Select(at => at.Label.FirstCharToUpper()))
        }
        else {
            <span>None</span>
        }
    </p>
    <p>
        <b>Weapons: </b>
        @if (Class.WeaponTypes.Count > 0) {
            @String.Join(", ", Class.WeaponTypes.Select(wt => wt.Name.FirstCharToUpper()))
        }
        else {
            <span>None</span>
        }
    </p>
    <p>
        <b>Saving Throws: </b>
        @if (Class.ClassHasSkillProficienciesChoices.Count > 0) {
            @String.Join(", ", Class.AbilityNames.Select(an => an.Name.FirstCharToUpper()))
        }
        else {
            <span>None</span>
        }
    </p>
    <p>
        <b>Skills: </b>
        @if (Class.ClassHasSkillProficienciesChoices.Count > 0) {
            <span>Choose @Class.ClassHasSkillProficienciesChoices.FirstOrDefault().Amount from </span>
            @String.Join(", ", Class.ClassHasSkillProficienciesChoices.Select(an => an.SkillName.FirstCharToUpper()))
        }
        else {
            <span>None</span>
        }
    </p>
    <hr/>
    <h3>Features</h3>
    @foreach (var feature in Class.Features.OrderBy(x => x.Level)) {
        <h4 class="mb-1 mt-3">
            <b>@feature.Label</b>
        </h4>
        <p>@feature.Description</p>
    }
    <hr/>
</DataInitializer>

@code {

    [Parameter]
    public string ClassName { get; set; }

    [Parameter]
    public Class? Class { get; set; }

    protected override async Task OnParametersSetAsync() {
        Class ??= await _classRepository.ReadGraphAsync(ClassName);
    }

}
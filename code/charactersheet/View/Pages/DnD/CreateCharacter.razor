@page "/createcharacter"

@using Domain.Repositories.Interfaces
@using Model.Entities
@using Domain.Extensions
@inject IRaceRepository _raceRepository;
@inject IClassRepository _classRepository;
@inject IRepository<Background> _backgroundRepository;
@inject IRepository<EAbilityName> _abilityRepository;
@inject IRepository<ESkillName> _skillRepository;
@inject ICharacterRepository _characterRepository;
@inject DialogService DialogService;
<RadzenDialog/>


<RadzenSteps @bind-SelectedIndex="@stepIndex">
<Steps>
<RadzenStepsItem Text="@(SelectedRace is null ? "Race" : "Race: " + SelectedRace.Name)">
    <DataInitializer Data="Races">
        <ChildComponent>
            <div class="row">
                <div class="col-md-3">
                    <RadzenCard>
                        <RadzenPanelMenu Click="async args => TempRace = await _raceRepository.ReadGraphAsync(args.Text)">
                            @foreach (var race in Races) {
                                if (race.SubRaces.Count > 0) {
                                    <RadzenPanelMenuItem Text="@race.Name">
                                        @foreach (var subrace in race.SubRaces) {
                                            <RadzenPanelMenuItem Text="@subrace.Name"></RadzenPanelMenuItem>
                                        }
                                    </RadzenPanelMenuItem>
                                }
                                else {
                                    <RadzenPanelMenuItem Text="@race.Name"></RadzenPanelMenuItem>
                                }
                            }
                        </RadzenPanelMenu>
                    </RadzenCard>
                    @if (TempRace != null && (TempRace.SubRaces.Count == 0 || TempRace.ParentRace is not null)) {
                        <RadzenCard>
                            <RadzenButton Text="Choose Race" Click=@(_ => { SelectedRace = TempRace; stepIndex++;}) ButtonStyle="ButtonStyle.Success"/>
                        </RadzenCard>
                    }
                </div>
                @if (TempRace != null) {
                    <RadzenCard class="col-md-8">
                        <RaceDetail Race="@TempRace"></RaceDetail>
                    </RadzenCard>
                }
            </div>
        </ChildComponent>
    </DataInitializer>
</RadzenStepsItem>

<RadzenStepsItem Text="@(SelectedClass is null ? "Class" : "Class: " + SelectedClass.Name)" Disabled="@(SelectedRace is null)">
    <DataInitializer Data="Classes">
        <ChildComponent>
            <div class="row">
                <div class="col-md-3">
                    <RadzenCard>
                        <RadzenPanelMenu Click="async args => TempClass = await _classRepository.ReadGraphAsync(args.Text)">
                            @foreach (var c in Classes) {
                                <RadzenPanelMenuItem Text="@c.Name"></RadzenPanelMenuItem>
                            }
                        </RadzenPanelMenu>
                    </RadzenCard>
                    @if (TempClass != null) {
                        <RadzenCard>
                            <h3>Choose Your Skills for @TempClass.Name Class</h3>
                            <RadzenSelectBar @bind-Value=@selectedSkillProficiencies TValue="IEnumerable<string>" Multiple="true" Disabled="@(selectedSkillProficiencies.Count() >= TempClass.ClassHasSkillProficienciesChoices.First().Amount)" class="skillSelect">
                                <Items>
                                    @foreach (var skill in TempClass.ClassHasSkillProficienciesChoices) {
                                        <RadzenSelectBarItem class="skillSelectItem" Text="@skill.SkillName" Value="@skill.SkillName"/>
                                    }
                                </Items>
                            </RadzenSelectBar>
                            <RadzenButton class="mt-2" Text="Reset" Click="@(_ => selectedSkillProficiencies = new List<string>())" ButtonStyle="ButtonStyle.Info"/>
                        </RadzenCard>
                        <RadzenCard>
                            <RadzenButton Text="Choose Class" Click=@(SelectClass) ButtonStyle="ButtonStyle.Success" Disabled="@(selectedSkillProficiencies.Count() < TempClass.ClassHasSkillProficienciesChoices.First().Amount)"/>
                        </RadzenCard>
                    }
                </div>
                @if (TempClass != null) {
                    <RadzenCard class="col-md-8">
                        <ClassDetail Class="@TempClass"></ClassDetail>
                    </RadzenCard>
                }
            </div>
        </ChildComponent>
    </DataInitializer>
</RadzenStepsItem>

<RadzenStepsItem Text="@(SelectedSpells.Count == 0 ? "Spells" : "Spells: " + SelectedSpells.Count)" Disabled="@(SelectedClass is null || SelectedClass.Spells.Count < 1)">
    <DataInitializer Data="SelectedClass.Spells">
        <ChildComponent>
            <div class="row">
                <div class="col-md-3">
                    <RadzenCard>
                        <RadzenPanelMenu Click="@(args => tempSpell = (args.Text[^1..] == "✔") ? SelectedClass.Spells.FirstOrDefault(s => s.Name == args.Text[..^2]) : SelectedClass.Spells.FirstOrDefault(s => s.Name == args.Text))">
                            @foreach (var spell in SelectedClass.Spells) {
                                if (SelectedSpells.Contains(spell)) {
                                    <RadzenPanelMenuItem Text="@(spell.Name + " ✔")"></RadzenPanelMenuItem>
                                }
                                else {
                                    <RadzenPanelMenuItem Text="@spell.Name"></RadzenPanelMenuItem>
                                }
                            }
                        </RadzenPanelMenu>
                    </RadzenCard>
                    @if (tempSpell != null) {
                        <RadzenCard>
                            @if (SelectedSpells.Contains(tempSpell)) {
                                <RadzenButton Text="Remove Spell" Click=@(() => SelectedSpells.Remove(tempSpell)) ButtonStyle="ButtonStyle.Danger"/>
                            }
                            else {
                                <RadzenButton Text="Choose Spell" Click=@(() => SelectedSpells.Add(tempSpell)) ButtonStyle="ButtonStyle.Success"/>
                            }
                        </RadzenCard>
                    }
                    <RadzenCard>
                        <RadzenButton Text="Finished" Click="@(_ => stepIndex++)" ButtonStyle="ButtonStyle.Success"/>
                    </RadzenCard>
                </div>
                @if (tempSpell != null) {
                    <RadzenCard class="col-md-8">
                        <SpellDetail SpellName="@tempSpell.Name"></SpellDetail>
                    </RadzenCard>
                }
            </div>
        </ChildComponent>
    </DataInitializer>
</RadzenStepsItem>

<RadzenStepsItem Text="Abilities" Disabled="@(SelectedClass is null)">
    @foreach (var abilityName in Abilities.Select(a => a.Name).OrderBy(an => Array.IndexOf(DnDExtensions.Abilities, an))) {
        <div class="row">
            <RadzenCard class="col-md-2">
                <h1 class="m-0 text-center">@abilityName</h1>
                <RadzenButton Text="Roll" Click=@(() => RollAbilityScore(abilityName)) ButtonStyle="ButtonStyle.Success"/>

            </RadzenCard>
            @if (abilityRolls.ContainsKey(abilityName)) {
                <RadzenCard class="col-md-2">
                    <h1 class="text-center">@abilityRolls[abilityName]</h1>
                </RadzenCard>
            }
        </div>
    }
</RadzenStepsItem>

<RadzenStepsItem Text="@(SelectedBackground is null ? "Background" : "Background: " + SelectedBackground.Name)" Disabled="@(abilityRolls.Count < 6)">
    <DataInitializer Data="Backgrounds">
        <ChildComponent>
            <div class="row">
                <div class="col-md-3">
                    <RadzenCard>
                        <RadzenPanelMenu Click="async args => TempBackground = (await _backgroundRepository.ReadAsync(b => b.Name == args.Text)).FirstOrDefault()">
                            @foreach (var b in Backgrounds) {
                                <RadzenPanelMenuItem Text="@b.Name"></RadzenPanelMenuItem>
                            }
                        </RadzenPanelMenu>
                    </RadzenCard>
                    @if (TempBackground != null) {
                        <RadzenCard>
                            <RadzenButton Text="Choose Background" Click=@(_ => SelectedBackground = TempBackground) ButtonStyle="ButtonStyle.Success"/>
                        </RadzenCard>
                    }
                </div>
                @if (TempBackground != null) {
                    <RadzenCard class="col-md-8">
                        <BackgroundDetail BackgroundName="@TempBackground.Name"></BackgroundDetail>
                    </RadzenCard>
                }
            </div>
            @if (SelectedBackground is not null) {
                <div class="row">
                    <div class="col-md-3">
                        <RadzenCard>
                            <RadzenSelectBar @bind-Value=@SelectedAlignment1 TValue="string">
                                <Items>
                                    <RadzenSelectBarItem Text="Lawful" Value="@("Lawful")"/>
                                    <RadzenSelectBarItem Text="Neutral" Value="@("Neutral")"/>
                                    <RadzenSelectBarItem Text="Chaotic" Value="@("Chaotic")"/>
                                </Items>
                            </RadzenSelectBar>
                            <RadzenSelectBar @bind-Value=@SelectedAlignment2 TValue="string">
                                <Items>
                                    <RadzenSelectBarItem Text="Good" Value="@("Good")"/>
                                    <RadzenSelectBarItem Text="Neutral" Value="@("Neutral")"/>
                                    <RadzenSelectBarItem Text="Evil" Value="@("Evil")"/>
                                </Items>
                            </RadzenSelectBar>
                        </RadzenCard>

                        <RadzenCard>
                            <RadzenButton Text="Finish - To Summary" Click=@(_ => SelectedBackground = TempBackground) ButtonStyle="ButtonStyle.Success" Disabled="@(PersonalityTraits is null || Flaws is null || Bonds is null || Ideals is null || SelectedAlignment1 is null || SelectedAlignment2 is null)"/>
                        </RadzenCard>

                    </div>

                    <RadzenCard class="col-md-2">
                        <h2>Personality Traits</h2>
                        <RadzenTextArea @bind-Value="@PersonalityTraits" Rows="10" Change=@(args => Console.WriteLine(args)) Class="w-100"/>
                    </RadzenCard>
                    <RadzenCard class="col-md-2">
                        <h2>Ideals</h2>
                        <RadzenTextArea @bind-Value="@Ideals" Rows="10" Change=@(args => Console.WriteLine(args)) Class="w-100"/>
                    </RadzenCard>
                    <RadzenCard class="col-md-2">
                        <h2>Bonds</h2>
                        <RadzenTextArea @bind-Value="@Bonds" Rows="10" Change=@(args => Console.WriteLine(args)) Class="w-100"/>
                    </RadzenCard>
                    <RadzenCard class="col-md-2">
                        <h2>Flaws</h2>
                        <RadzenTextArea @bind-Value="@Flaws" Rows="10" Change=@(args => Console.WriteLine(args)) Class="w-100"/>
                    </RadzenCard>
                </div>
            }
        </ChildComponent>
    </DataInitializer>
</RadzenStepsItem>

<RadzenStepsItem Text="Summary" Disabled="@(SelectedBackground == null)">
    <RadzenCard>
        <h2>Race</h2>
        <h3>@SelectedRace.Name</h3>
    </RadzenCard>
    <RadzenCard>
        <h2>Class</h2>
        <h3>@SelectedClass.Name</h3>
    </RadzenCard>
    @if (SelectedSpells.Count > 0) {
        <RadzenCard>
            <h2>Spells</h2>
            @foreach (var spell in SelectedSpells) {
                <p>@spell.Level : @spell.Name</p>
            }
        </RadzenCard>
    }
    <RadzenCard>
        <h2>Abilities</h2>
        @foreach (var abilityRoll in abilityRolls) {
            <p>@abilityRoll.Key.FirstCharToUpper() : @abilityRoll.Value</p>
        }
    </RadzenCard>
    <RadzenCard>
        <h2>Background</h2>
        <h3>@SelectedBackground.Name</h3>
    </RadzenCard>

    <RadzenCard>
        <h2 class="text-center">Give your Character a name:</h2>
        <RadzenTextBox class="m-auto w-20" Change="@(text => SelectedName = text)"/>
    </RadzenCard>

    <RadzenCard>
        <RadzenButton class="m-auto" Text="Finished - Create My Character" Click="@(_ => InsertCharacter())" ButtonStyle="ButtonStyle.Success" Disabled="@(SelectedName is null)"/>
    </RadzenCard>
</RadzenStepsItem>
</Steps>
</RadzenSteps>


@code {
    private int stepIndex { get; set; }
    Race? TempRace { get; set; }
    Class? TempClass { get; set; }
    Background? TempBackground { get; set; }
    Spell? tempSpell { get; set; }

    Race? SelectedRace { get; set; }
    Class? SelectedClass { get; set; }
    Background? SelectedBackground { get; set; }
    List<Spell> SelectedSpells = new();
    string? SelectedName { get; set; }

    IEnumerable<string> selectedSkillProficiencies = new List<string>();

    string? SelectedAlignment1 { get; set; }
    string? SelectedAlignment2 { get; set; }
    private string Alignment => SelectedAlignment1 + " " + SelectedAlignment2;
    private int GetAbilityScore(string abilityName) => Convert.ToInt32(abilityRolls[abilityName].Split(' ')[0]);
    private int Hp => GetAbilityScore("CONSTITUTION") + SelectedClass.HitDie;

    string? PersonalityTraits { get; set; }
    string? Ideals { get; set; }
    string? Bonds { get; set; }
    string? Flaws { get; set; }

    List<Race> Races { get; set; }
    List<Class> Classes { get; set; }
    List<Background> Backgrounds { get; set; }
    List<EAbilityName> Abilities { get; set; }
    List<ESkillName> Skills { get; set; }


    protected override async Task OnInitializedAsync() {
        Races = await _raceRepository.ReadParentRaces();
        Classes = await _classRepository.ReadAsync();
        Backgrounds = await _backgroundRepository.ReadAsync();
        Abilities = await _abilityRepository.ReadAsync();
        Skills = await _skillRepository.ReadAsync();
    }

    private void SelectClass() {
        SelectedSpells = new List<Spell>();
        SelectedClass = TempClass;
        if (SelectedClass.Spells.Count > 0) stepIndex++;
        else stepIndex += 2;
    }

    private Dictionary<string, string> abilityRolls = new();

    private void RollAbilityScore(string abilityName) {
        var rolledScore = DnDExtensions.RollDice(4, 6, true).Sum();
        var increase = SelectedRace.RaceHasAbilityScoreIncreases.Where(a => a.AbilityName == abilityName).Sum(abilityScoreIncrease => abilityScoreIncrease.Increase);
        abilityRolls[abilityName] = $"{rolledScore + increase} (+{increase})";
    }

    private async void InsertCharacter() {
        List<Ability> abilityList = new List<Ability>();

        foreach (var abilityRoll in abilityRolls) {
            var proficient = SelectedClass.SavingThrowProficiencies.Count(s => s.Name == abilityRoll.Key) > 0;

            List<Skill> skillList = new List<Skill>();

            foreach (var skill in Skills.Where(s=>s.)) {
                var skillProficient = selectedSkillProficiencies.Contains(skill.Name);
                skillList.Add(new Skill() {
                    Name = skill.Name,
                    Proficient = Convert.ToSByte(skillProficient)
                });
            }

            abilityList.Add(new Ability() {
                Name = abilityRoll.Key,
                AbilityScore = Convert.ToInt32(abilityRoll.Value.Split(' ')[0]),
                Proficient = Convert.ToSByte(proficient),
                Skills = skillList
            });
        }

        await _characterRepository.CreateAsync(new Character {
            Name = SelectedName,
            Race = SelectedRace,
            Class = SelectedClass,
            Background = SelectedBackground,
            Alignment = Alignment,
            Personalities = new List<Personality> {
                new() { Name = "Personality Traits", Description = PersonalityTraits },
                new() { Name = "Ideals", Description = Ideals },
                new() { Name = "Bonds", Description = Bonds },
                new() { Name = "Flaws", Description = Flaws }
            },
            ArmorClass = 10,
            Spells = SelectedSpells,
            MaxHp = Hp,
            CurrentHp = Hp,
            Abilities = abilityList
        });
    }
    // ability von parent class nicht erhöht
}


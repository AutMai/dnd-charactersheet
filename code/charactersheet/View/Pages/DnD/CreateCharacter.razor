@page "/createcharacter"

@using Domain.Repositories.Interfaces
@using Model.Entities
@using Domain.Extensions
@inject IAbilityNameRepository _abilityRepository;
@attribute [Authorize]


<RadzenSteps @bind-SelectedIndex="@StepIndex">
    <Steps>
        <RadzenStepsItem Text="@(Character.Race is null ? "Race" : "Race: " + Character.Race.Name)">
            <ChooseRaceStep @bind-CharacterRace="Character.Race"/>
        </RadzenStepsItem>

        <RadzenStepsItem Text="@(Character.Class is null ? "Class" : "Class: " + Character.Class.Name)" Disabled="@(Character.Race is null)">
            <ChooseClassStep @bind-Character="Character" @bind-SelectedSkillProficiencies="SelectedSkillProficiencies"></ChooseClassStep>
        </RadzenStepsItem>

        <RadzenStepsItem Text="@(Character.Spells.Count == 0 ? "Spells" : "Spells: " + Character.Spells.Count)" Disabled="@(Character.Class is null || Character.Class.Spells.Count < 1)">
            <ChooseSpellsStep @bind-CharacterSpells="Character.Spells" Class="Character.Class"></ChooseSpellsStep>
        </RadzenStepsItem>

        <RadzenStepsItem Text="Abilities" Disabled="@(Character.Class is null)">
            <RollAbilitiesStep @bind-Character="Character" SelectedSkillProficiencies="SelectedSkillProficiencies"></RollAbilitiesStep>
        </RadzenStepsItem>

        <RadzenStepsItem Text="@(Character.Background is null ? "Background" : "Background: " + Character.Background.Name)" Disabled="@(Character.Abilities.Count < 6)">
            <ChooseBackgroundStep @bind-Character="Character"></ChooseBackgroundStep>
        </RadzenStepsItem>

        <RadzenStepsItem Text="Summary" Disabled="@(Character.Background == null)">
            <SummaryStep @bind-Character="Character"></SummaryStep>
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>


@code {
    public static int StepIndex { get; set; }
    public static List<EAbilityName> StaticAbilities { get; set; }

    public Character Character { get; set; } = new();

    IEnumerable<string> SelectedSkillProficiencies { get; set; } = new List<string>();


    protected override async Task OnInitializedAsync() {
        StepIndex = 0;
        StaticAbilities = (await _abilityRepository.ReadGraphAsync()).OrderBy(an => Array.IndexOf(DnDExtensions.AbilitiesSorted, an)).ToList();
    }

}
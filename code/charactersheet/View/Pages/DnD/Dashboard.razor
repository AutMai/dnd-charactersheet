@page "/dashboard"
@using Model.Entities
@using Domain.Repositories.Interfaces
@using Model.Identity
@inject IApplicationUserRepository userRepository
@inject ICharacterRepository _characterRepository
@inject IRepository<ExperienceProficencyBonu> _experienceProfBonusRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]

<div class="row w-50 m-auto">
    <div class="col">
        <h1>My Characters</h1>
    </div>
    <div class="col d-flex justify-content-end align-items-center">
        <RadzenButton Click=@(() => { _navigationManager.NavigateTo("/createcharacter"); }) Text="Create Character" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"/>
    </div>
    <hr style="height: 3px;"/>
</div>


<DataInitializer Data="@_user">
    <div class="row w-50 m-auto">
        @foreach (var character in _user.Characters) {
            <div class="col-md-4 p-1">
                <RadzenCard Style="cursor: pointer;" @onclick="@(_ => _navigationManager.NavigateTo($"/character/{character.CharacterId}"))">
                    <h2 class="m-0">@character.Name</h2><hr/>
                    <div>
                        <b>Race: </b> @(character.Race.Name)
                    </div>
                    <div>
                        <b>Class:</b> @(character.Class.Name)
                    </div>
                    <div>
                        <b>Level:</b> @(Level(character.Xp))
                    </div>
                </RadzenCard>
            </div>
        }
    </div>
</DataInitializer>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    ApplicationUser _user;

    private List<ExperienceProficencyBonu> ExperienceProficencyBonusList { get; set; }


    protected override async Task OnInitializedAsync() {
        var authState = await authStateTask;
        _user = (await userRepository.ReadGraphAsync(authState.User.Identity!.Name!))!;
        ExperienceProficencyBonusList = await _experienceProfBonusRepository.ReadAsync();
    }

    private int Level(int xp) => ExperienceProficencyBonusList.Last(e => xp >= e.Xp).Level;
}
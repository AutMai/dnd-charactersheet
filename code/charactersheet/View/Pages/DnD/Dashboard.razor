@page "/dashboard"
@using Model.Entities
@using Domain.Repositories.Interfaces
@inject IApplicationUserRepository userRepository
@inject ICharacterRepository _characterRepository
@inject IRepository<ExperienceProficencyBonu> _experienceProfBonusRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]

<div class="row w-50 m-auto">
    <h1>My Characters</h1>
    <hr style="height: 3px;"/>
</div>


<DataInitializer Data="@_user">
    <ChildComponent>
        <div class="row w-50 m-auto">
            @foreach (var character in _user.Characters) {
                <div class="col-md-4 p-1">
                    <RadzenCard Style="cursor: pointer;" @onclick="@(_ => _navigationManager.NavigateTo($"/character/{character.CharacterId}"))">
                        <h2 class="m-0">@character.Name</h2><hr/>
                        <div>
                            <b>Race: </b> @(character.Race.Name)
                        </div>
                        <div>
                            <b>Class:</b> @(character.Class.Name)
                        </div>
                        <div>
                            <b>Level:</b> @(Level(character.Xp))
                        </div>
                    </RadzenCard>
                </div>
            }
        </div>
    </ChildComponent>
</DataInitializer>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    ApplicationUser _user;

    private List<ExperienceProficencyBonu> ExperienceProficencyBonusList { get; set; }


    protected override async Task OnInitializedAsync() {
        var authState = await authStateTask;
        _user = (await userRepository.ReadGraphAsync(authState.User.Identity!.Name!))!;
        ExperienceProficencyBonusList = await _experienceProfBonusRepository.ReadAsync();
    }

    private int Level(int xp) => ExperienceProficencyBonusList.Last(e => xp >= e.Xp).Level;
}
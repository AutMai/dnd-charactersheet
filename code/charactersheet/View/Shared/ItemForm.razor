@using Model.Entities
@using Domain.Repositories.Interfaces
@using Microsoft.AspNetCore.Components
@using Domain.Extensions
@using Domain.Repositories.Implementations
@using Castle.Core.Internal
@inject IRepository<EArmorType> _armorTypeRepository;
@inject IItemRepository _itemRepository;
@inject IRepository<EWeaponType> _weaponTypeRepository;
@inject IRepository<EDamageType> _damageTypeRepository;
@inject IRepository<CharactersHasItem> _characterHasItemRepository;

@inject DialogService dialogService

@if (!itemExistChecked) {
    <RadzenTemplateForm Data="Item">
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Name"/>
            </div>
            <div class="col-md-8">
                <RadzenTextBox style="width: 100%;" Name="WeaponName" @bind-Value="Item.Name"/>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Add" Click="@(async _ => await SubmitAsync())"/>
            </div>
        </div>
    </RadzenTemplateForm>
}
else {
    <div class="row">
        <div class="col-md-8 align-items-center d-flex">
            <RadzenLabel Text="Create new Item"/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Type"/>
        </div>
        <div class="col-md-8">
            <RadzenDropDown @bind-Value="@SelectedItemType" Data="@_types" style="width: 100%;" TextProperty="Name" ValueProperty="Name">
            </RadzenDropDown>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Name"/>
        </div>
        <div class="col-md-8">
            <RadzenTextBox style="width: 100%;" Name="WeaponName" @bind-Value="Item.Name"/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Description"/>
        </div>
        <div class="col-md-8">
            <RadzenTextArea style="width: 100%;" Rows="5" Name="WeaponDescription" @bind-Value="Item.Description"/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Price"/>
        </div>
        <div class="col-md-8">
            <RadzenTextBox type="number" style="width: 10%;" ValueChanged="s => Item.Price = s.ToInt()"/>
            <span>cp</span>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Weight"/>
        </div>
        <div class="col-md-8">
            <RadzenTextBox type="number" style="width: 10%;" Name="WeaponName" ValueChanged="s => Item.Weight = s.ToInt()"/>
            <span>lb.</span>
        </div>
    </div>

    @if (SelectedItemType == _types[1]) {
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Armor Class"/>
            </div>
            <div class="col-md-8">
                <RadzenDropDown @bind-Value="Item.Armor.ArmorType" Data="@ArmorTypes.Select(k => k.Label)" style="width: 100%;" TextProperty="Name" ValueProperty="Name">
                </RadzenDropDown>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Armor Class"/>
            </div>
            <div class="col-md-8">
                <RadzenNumeric type="number" Name="WeaponName" @bind-Value="Item.Armor.ArmorClass"/>
            </div>
        </div>
    }

    @if (SelectedItemType == _types[2]) {
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Type"/>
            </div>
            <div class="col-md-8">
                <RadzenDropDown @bind-Value="Item.Weapon.WeaponType" Data="@WeaponTypes" style="width: 100%;" TextProperty="Name" ValueProperty="Name">
                </RadzenDropDown>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Damage"/>
            </div>
            <div class="col-md-8">
                <RadzenTextBox type="number" style="width: 10%;" Name="WeaponName" ValueChanged="s => Item.Weapon.DamageDieAmount = s.ToInt()"/>
                <span>d</span>
                <RadzenTextBox type="number" style="width: 10%;" Name="WeaponName" ValueChanged="s => Item.Weapon.DamageDieType = s.ToInt()"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Damage Type"/>
            </div>
            <div class="col-md-8">
                <RadzenDropDown @bind-Value="Item.Weapon.DamageType" Data="@DamageTypes" style="width: 100%;" TextProperty="Name" ValueProperty="Name">
                </RadzenDropDown>
            </div>
        </div>
    }

    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Add" Click="@(async _ => await SubmitNewAsync())"/>
        </div>
    </div>
}


<style>
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    
    /* Firefox */
    input[type=number] {
      -moz-appearance: textfield;
    }
</style>

@code {

    [Parameter]
    public Character Character { get; set; }

    public bool itemExistChecked { get; set; } = false;
    
    readonly List<string> _types = new() { "Item", "Armor", "Weapon" };

    public Item Item { get; set; } = new();

    [Parameter]
    public string SelectedItemType { get; set; }

    private List<EArmorType> ArmorTypes { get; set; }
    private List<EWeaponType> WeaponTypes { get; set; }
    private List<EDamageType> DamageTypes { get; set; }

    protected override async Task OnInitializedAsync() {
        Item.Armor = new Armor();
        Item.Weapon = new Weapon();
        if (!SelectedItemType.IsNullOrEmpty()) {
            itemExistChecked = true;
        }
        ArmorTypes = await _armorTypeRepository.ReadAsync();
        WeaponTypes = await _weaponTypeRepository.ReadAsync();
        DamageTypes = await _damageTypeRepository.ReadAsync();
    }

    private async Task SubmitAsync() {
        var existingItem = _itemRepository.Read(Item.Name);

        if (existingItem is not null) { // item exists already
            var charactersHasItem = Character.CharactersHasItems.FirstOrDefault(k => k.ItemId == existingItem.ItemId); 
            if (charactersHasItem is not null) { // character already has min 1 of this item 
                CharactersHasItem c = new(){
                    Amount = charactersHasItem.Amount + 1,
                    CharacterId = charactersHasItem.CharacterId,
                    ItemId = charactersHasItem.ItemId
                };
                await _characterHasItemRepository.DeleteAsync(charactersHasItem);
                await _characterHasItemRepository.CreateAsync(c);
                dialogService.Close(true);
                return;
            }

            await _characterHasItemRepository.CreateAsync(new CharactersHasItem() { Amount = 1, CharacterId = Character.CharacterId, ItemId = existingItem.ItemId });
            dialogService.Close(true);
            return;
        }

        itemExistChecked = true;
        StateHasChanged();
    }

    private async Task SubmitNewAsync() {
        if (SelectedItemType == _types[0]) {
            Item.Armor = null!;
            Item.Weapon = null!;
        }
        if (SelectedItemType == _types[1]) {
            Item.Weapon = null!;
        }
        if (SelectedItemType == _types[2]) {
            Item.Armor = null!;
        }
        var x = await _itemRepository.CreateAsync(Item);
        await _characterHasItemRepository.CreateAsync(new CharactersHasItem() { Amount = 1, CharacterId = Character.CharacterId, ItemId = x.ItemId });
        dialogService.Close(true);
    }

}
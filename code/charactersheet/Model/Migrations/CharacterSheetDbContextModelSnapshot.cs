// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configurations;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(CharacterSheetDbContext))]
    partial class CharacterSheetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("CharacterHasLanguage", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CHARACTER_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("CharacterId", "Name")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CharacterId" }, "fk_CHARACTERS_has_E_LANGUAGES_CHARACTERS1_idx");

                    b.HasIndex(new[] { "Name" }, "fk_CHARACTERS_has_E_LANGUAGES_E_LANGUAGES1_idx");

                    b.ToTable("character_has_languages", (string)null);
                });

            modelBuilder.Entity("CharacterHasSpell", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CHARACTER_ID");

                    b.Property<int>("SpellId")
                        .HasColumnType("int")
                        .HasColumnName("SPELL_ID");

                    b.HasKey("CharacterId", "SpellId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CharacterId" }, "fk_CHARACTERS_has_SPELLS_CHARACTERS1_idx");

                    b.HasIndex(new[] { "SpellId" }, "fk_CHARACTERS_has_SPELLS_SPELLS1_idx");

                    b.ToTable("character_has_spells", (string)null);
                });

            modelBuilder.Entity("CharactersHasPersonality", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CHARACTER_ID");

                    b.Property<int>("PersonalitiesId")
                        .HasColumnType("int")
                        .HasColumnName("PERSONALITIES_ID");

                    b.HasKey("CharacterId", "PersonalitiesId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CharacterId" }, "fk_CHARACTERS_has_PERSONALITIES_CHARACTERS1_idx");

                    b.HasIndex(new[] { "PersonalitiesId" }, "fk_CHARACTERS_has_PERSONALITIES_PERSONALITIES1_idx");

                    b.ToTable("characters_has_personalities", (string)null);
                });

            modelBuilder.Entity("ClassHasProficiency", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_ID");

                    b.HasKey("ItemId", "ClassId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ClassId" }, "fk_ITEMS_has_CLASSES_CLASSES1_idx");

                    b.HasIndex(new[] { "ItemId" }, "fk_ITEMS_has_CLASSES_ITEMS1_idx");

                    b.ToTable("class_has_proficiencies", (string)null);
                });

            modelBuilder.Entity("ClassHasSpell", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_ID");

                    b.Property<int>("SpellId")
                        .HasColumnType("int")
                        .HasColumnName("SPELL_ID");

                    b.HasKey("ClassId", "SpellId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ClassId" }, "fk_CLASSES_has_SPELLS_CLASSES1_idx");

                    b.HasIndex(new[] { "SpellId" }, "fk_CLASSES_has_SPELLS_SPELLS1_idx");

                    b.ToTable("class_has_spells", (string)null);
                });

            modelBuilder.Entity("FeaturesHasClass", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int")
                        .HasColumnName("FEATURE_ID");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_ID");

                    b.HasKey("FeatureId", "ClassId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ClassId" }, "fk_FEATURES_has_CLASSES_CLASSES1_idx");

                    b.HasIndex(new[] { "FeatureId" }, "fk_FEATURES_has_CLASSES_FEATURES1_idx");

                    b.ToTable("features_has_classes", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ABILITY_ID");

                    b.Property<int>("AbilityScore")
                        .HasColumnType("int")
                        .HasColumnName("ABILITY_SCORE");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CHARACTER_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<sbyte>("Proficient")
                        .HasColumnType("tinyint")
                        .HasColumnName("PROFICIENT");

                    b.HasKey("AbilityId");

                    b.HasIndex(new[] { "CharacterId" }, "fk_ABILITIES_CHARACTERS1_idx");

                    b.HasIndex(new[] { "Name" }, "fk_E_ABILITIES_E_ABILITY_NAMES1_idx");

                    b.ToTable("abilities", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Armor", b =>
                {
                    b.Property<int>("ArmorId")
                        .HasColumnType("int")
                        .HasColumnName("ARMOR_ID");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int")
                        .HasColumnName("ARMOR_CLASS");

                    b.Property<string>("ArmorType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ARMOR_TYPE");

                    b.HasKey("ArmorId");

                    b.HasIndex(new[] { "ArmorType" }, "fk_ARMORS_E_ARMOR_TYPE1_idx");

                    b.ToTable("armors", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Background", b =>
                {
                    b.Property<int>("BackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BACKGROUND_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<string>("SkillProficiencies")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SKILL_PROFICIENCIES");

                    b.HasKey("BackgroundId");

                    b.ToTable("backgrounds", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CHARACTER_ID");

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ALIGNMENT");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int")
                        .HasColumnName("ARMOR_CLASS");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("int")
                        .HasColumnName("BACKGROUND_ID");

                    b.Property<int>("BronzeCoins")
                        .HasColumnType("int")
                        .HasColumnName("BRONZE_COINS");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_ID");

                    b.Property<int>("CurrentHp")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_HP");

                    b.Property<int>("HitDice")
                        .HasColumnType("int")
                        .HasColumnName("HIT_DICE");

                    b.Property<sbyte>("Inspiration")
                        .HasColumnType("tinyint")
                        .HasColumnName("INSPIRATION");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int")
                        .HasColumnName("MAX_HP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<int>("RaceId")
                        .HasColumnType("int")
                        .HasColumnName("RACE_ID");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("SPEED");

                    b.Property<int>("TemporaryHp")
                        .HasColumnType("int")
                        .HasColumnName("TEMPORARY_HP");

                    b.Property<int>("Xp")
                        .HasColumnType("int")
                        .HasColumnName("XP");

                    b.HasKey("CharacterId");

                    b.HasIndex(new[] { "BackgroundId" }, "fk_CHARACTERS_BACKGROUNDS1_idx");

                    b.HasIndex(new[] { "ClassId" }, "fk_CHARACTERS_CLASSES1_idx");

                    b.HasIndex(new[] { "RaceId" }, "fk_CHARACTERS_RACES1_idx");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("Model.Entities.CharactersHasItem", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CHARACTER_ID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("AMOUNT");

                    b.HasKey("CharacterId", "ItemId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CharacterId" }, "fk_CHARACTERS_has_ITEMS_CHARACTERS1_idx");

                    b.HasIndex(new[] { "ItemId" }, "fk_CHARACTERS_has_ITEMS_ITEMS1_idx");

                    b.ToTable("characters_has_items", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CLASS_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("HitDieId")
                        .HasColumnType("int")
                        .HasColumnName("HIT_DIE_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("ClassId");

                    b.HasIndex(new[] { "HitDieId" }, "fk_CLASSES_DICETHROWS1_idx");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("Model.Entities.DeathSafe", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CHARACTER_ID");

                    b.Property<short>("Count")
                        .HasColumnType("smallint")
                        .HasColumnName("COUNT");

                    b.Property<sbyte>("Success")
                        .HasColumnType("tinyint")
                        .HasColumnName("SUCCESS");

                    b.HasKey("CharacterId")
                        .HasName("PRIMARY");

                    b.ToTable("death_saves", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Dicethrow", b =>
                {
                    b.Property<int>("DicethrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DICETHROW_ID");

                    b.Property<int>("DiceCount")
                        .HasColumnType("int")
                        .HasColumnName("DICE_COUNT");

                    b.Property<int>("DiceType")
                        .HasColumnType("int")
                        .HasColumnName("DICE_TYPE");

                    b.HasKey("DicethrowId");

                    b.ToTable("dicethrows", (string)null);
                });

            modelBuilder.Entity("Model.Entities.EAbilityName", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("e_ability_names", (string)null);
                });

            modelBuilder.Entity("Model.Entities.EArmorType", b =>
                {
                    b.Property<string>("Label")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("LABEL");

                    b.HasKey("Label")
                        .HasName("PRIMARY");

                    b.ToTable("e_armor_type", (string)null);
                });

            modelBuilder.Entity("Model.Entities.EDamageType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("e_damage_types", (string)null);
                });

            modelBuilder.Entity("Model.Entities.ELanguage", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("e_languages", (string)null);
                });

            modelBuilder.Entity("Model.Entities.ESize", b =>
                {
                    b.Property<string>("Label")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("LABEL");

                    b.HasKey("Label")
                        .HasName("PRIMARY");

                    b.ToTable("e_size", (string)null);
                });

            modelBuilder.Entity("Model.Entities.ESkillName", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("e_skill_names", (string)null);
                });

            modelBuilder.Entity("Model.Entities.EWeaponType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("e_weapon_types", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FEATURE_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("LABEL");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("LEVEL");

                    b.HasKey("FeatureId");

                    b.ToTable("features", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("PRICE");

                    b.Property<int>("Weight")
                        .HasColumnType("int")
                        .HasColumnName("WEIGHT");

                    b.HasKey("ItemId");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Personality", b =>
                {
                    b.Property<int>("PersonalitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PERSONALITIES_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.HasKey("PersonalitiesId")
                        .HasName("PRIMARY");

                    b.ToTable("personalities", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RACE_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<int?>("ParentRaceId")
                        .HasColumnType("int")
                        .HasColumnName("PARENT_RACE_ID");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("SIZE");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("SPEED");

                    b.HasKey("RaceId");

                    b.HasIndex(new[] { "Size" }, "fk_RACES_E_SIZE_idx");

                    b.HasIndex(new[] { "ParentRaceId" }, "fk_RACES_RACES1_idx");

                    b.ToTable("races", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SKILL_ID");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int")
                        .HasColumnName("ABILITY_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<sbyte>("Proficient")
                        .HasColumnType("tinyint")
                        .HasColumnName("PROFICIENT");

                    b.HasKey("SkillId");

                    b.HasIndex(new[] { "AbilityId" }, "fk_SKILLS_ABILITIES1_idx");

                    b.HasIndex(new[] { "Name" }, "fk_SKILLS_E_SKILL_NAMES1_idx");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SPELL_ID");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("COMPONENTS");

                    b.Property<int>("DamageDieId")
                        .HasColumnType("int")
                        .HasColumnName("DAMAGE_DIE_ID");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("DAMAGE_TYPE");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("DURATION");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("LEVEL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("RANGE");

                    b.HasKey("SpellId");

                    b.HasIndex(new[] { "DamageDieId" }, "fk_SPELLS_DICETHROWS1_idx");

                    b.HasIndex(new[] { "DamageType" }, "fk_SPELLS_E_DAMAGE_TYPES1_idx");

                    b.ToTable("spells", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Trait", b =>
                {
                    b.Property<int>("TraitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TRAIT_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("LABEL");

                    b.HasKey("TraitId");

                    b.ToTable("traits", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Weapon", b =>
                {
                    b.Property<int>("WeaponId")
                        .HasColumnType("int")
                        .HasColumnName("WEAPON_ID");

                    b.Property<int>("DamageDieId")
                        .HasColumnType("int")
                        .HasColumnName("DAMAGE_DIE_ID");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("DAMAGE_TYPE");

                    b.Property<string>("WeaponType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("WEAPON_TYPE");

                    b.HasKey("WeaponId");

                    b.HasIndex(new[] { "DamageDieId" }, "fk_WEAPONS_DICETHROWS1_idx");

                    b.HasIndex(new[] { "DamageType" }, "fk_WEAPONS_E_DAMAGE_TYPES1_idx");

                    b.HasIndex(new[] { "WeaponType" }, "fk_WEAPONS_E_WEAPON_TYPES1_idx");

                    b.HasIndex(new[] { "WeaponId" }, "fk_WEAPONS_ITEMS1_idx");

                    b.ToTable("weapons", (string)null);
                });

            modelBuilder.Entity("RaceHasTrait", b =>
                {
                    b.Property<int>("TraitId")
                        .HasColumnType("int")
                        .HasColumnName("TRAIT_ID");

                    b.Property<int>("RaceId")
                        .HasColumnType("int")
                        .HasColumnName("RACE_ID");

                    b.HasKey("TraitId", "RaceId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RaceId" }, "fk_TRAITS_has_RACES_RACES1_idx");

                    b.HasIndex(new[] { "TraitId" }, "fk_TRAITS_has_RACES_TRAITS1_idx");

                    b.ToTable("race_has_traits", (string)null);
                });

            modelBuilder.Entity("RacesHasELanguage", b =>
                {
                    b.Property<int>("RaceId")
                        .HasColumnType("int")
                        .HasColumnName("RACE_ID");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("LANGUAGE_NAME");

                    b.HasKey("RaceId", "LanguageName")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "LanguageName" }, "fk_RACES_has_E_LANGUAGES_E_LANGUAGES1_idx");

                    b.HasIndex(new[] { "RaceId" }, "fk_RACES_has_E_LANGUAGES_RACES1_idx");

                    b.ToTable("races_has_e_languages", (string)null);
                });

            modelBuilder.Entity("CharacterHasLanguage", b =>
                {
                    b.HasOne("Model.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_E_LANGUAGES_CHARACTERS1");

                    b.HasOne("Model.Entities.ELanguage", null)
                        .WithMany()
                        .HasForeignKey("Name")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_E_LANGUAGES_E_LANGUAGES1");
                });

            modelBuilder.Entity("CharacterHasSpell", b =>
                {
                    b.HasOne("Model.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_SPELLS_CHARACTERS1");

                    b.HasOne("Model.Entities.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_SPELLS_SPELLS1");
                });

            modelBuilder.Entity("CharactersHasPersonality", b =>
                {
                    b.HasOne("Model.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_PERSONALITIES_CHARACTERS1");

                    b.HasOne("Model.Entities.Personality", null)
                        .WithMany()
                        .HasForeignKey("PersonalitiesId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_PERSONALITIES_PERSONALITIES1");
                });

            modelBuilder.Entity("ClassHasProficiency", b =>
                {
                    b.HasOne("Model.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_ITEMS_has_CLASSES_CLASSES1");

                    b.HasOne("Model.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_ITEMS_has_CLASSES_ITEMS1");
                });

            modelBuilder.Entity("ClassHasSpell", b =>
                {
                    b.HasOne("Model.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_CLASSES_has_SPELLS_CLASSES1");

                    b.HasOne("Model.Entities.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .IsRequired()
                        .HasConstraintName("fk_CLASSES_has_SPELLS_SPELLS1");
                });

            modelBuilder.Entity("FeaturesHasClass", b =>
                {
                    b.HasOne("Model.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_FEATURES_has_CLASSES_CLASSES1");

                    b.HasOne("Model.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .IsRequired()
                        .HasConstraintName("fk_FEATURES_has_CLASSES_FEATURES1");
                });

            modelBuilder.Entity("Model.Entities.Ability", b =>
                {
                    b.HasOne("Model.Entities.Character", "Character")
                        .WithMany("Abilities")
                        .HasForeignKey("CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_ABILITIES_CHARACTERS1");

                    b.HasOne("Model.Entities.EAbilityName", "NameNavigation")
                        .WithMany("Abilities")
                        .HasForeignKey("Name")
                        .IsRequired()
                        .HasConstraintName("fk_E_ABILITIES_E_ABILITY_NAMES1");

                    b.Navigation("Character");

                    b.Navigation("NameNavigation");
                });

            modelBuilder.Entity("Model.Entities.Armor", b =>
                {
                    b.HasOne("Model.Entities.Item", "ArmorNavigation")
                        .WithOne("Armor")
                        .HasForeignKey("Model.Entities.Armor", "ArmorId")
                        .IsRequired()
                        .HasConstraintName("fk_ARMORS_ITEMS1");

                    b.HasOne("Model.Entities.EArmorType", "ArmorTypeNavigation")
                        .WithMany("Armors")
                        .HasForeignKey("ArmorType")
                        .IsRequired()
                        .HasConstraintName("fk_ARMORS_E_ARMOR_TYPE1");

                    b.Navigation("ArmorNavigation");

                    b.Navigation("ArmorTypeNavigation");
                });

            modelBuilder.Entity("Model.Entities.Character", b =>
                {
                    b.HasOne("Model.Entities.Background", "Background")
                        .WithMany("Characters")
                        .HasForeignKey("BackgroundId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_BACKGROUNDS1");

                    b.HasOne("Model.Entities.Class", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_CLASSES1");

                    b.HasOne("Model.Entities.Race", "Race")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_RACES1");

                    b.Navigation("Background");

                    b.Navigation("Class");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Model.Entities.CharactersHasItem", b =>
                {
                    b.HasOne("Model.Entities.Character", "Character")
                        .WithMany("CharactersHasItems")
                        .HasForeignKey("CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_ITEMS_CHARACTERS1");

                    b.HasOne("Model.Entities.Item", "Item")
                        .WithMany("CharactersHasItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_CHARACTERS_has_ITEMS_ITEMS1");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Class", b =>
                {
                    b.HasOne("Model.Entities.Dicethrow", "HitDie")
                        .WithMany("Classes")
                        .HasForeignKey("HitDieId")
                        .IsRequired()
                        .HasConstraintName("fk_CLASSES_DICETHROWS1");

                    b.Navigation("HitDie");
                });

            modelBuilder.Entity("Model.Entities.DeathSafe", b =>
                {
                    b.HasOne("Model.Entities.Character", "Character")
                        .WithOne("DeathSafe")
                        .HasForeignKey("Model.Entities.DeathSafe", "CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_DEATH_SAVES_CHARACTERS1");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Model.Entities.Race", b =>
                {
                    b.HasOne("Model.Entities.Race", "ParentRace")
                        .WithMany("InverseParentRace")
                        .HasForeignKey("ParentRaceId")
                        .HasConstraintName("fk_RACES_RACES1");

                    b.HasOne("Model.Entities.ESize", "SizeNavigation")
                        .WithMany("Races")
                        .HasForeignKey("Size")
                        .IsRequired()
                        .HasConstraintName("fk_RACES_E_SIZE");

                    b.Navigation("ParentRace");

                    b.Navigation("SizeNavigation");
                });

            modelBuilder.Entity("Model.Entities.Skill", b =>
                {
                    b.HasOne("Model.Entities.Ability", "Ability")
                        .WithMany("Skills")
                        .HasForeignKey("AbilityId")
                        .IsRequired()
                        .HasConstraintName("fk_SKILLS_ABILITIES1");

                    b.HasOne("Model.Entities.ESkillName", "NameNavigation")
                        .WithMany("Skills")
                        .HasForeignKey("Name")
                        .IsRequired()
                        .HasConstraintName("fk_SKILLS_E_SKILL_NAMES1");

                    b.Navigation("Ability");

                    b.Navigation("NameNavigation");
                });

            modelBuilder.Entity("Model.Entities.Spell", b =>
                {
                    b.HasOne("Model.Entities.Dicethrow", "DamageDie")
                        .WithMany("Spells")
                        .HasForeignKey("DamageDieId")
                        .IsRequired()
                        .HasConstraintName("fk_SPELLS_DICETHROWS1");

                    b.HasOne("Model.Entities.EDamageType", "DamageTypeNavigation")
                        .WithMany("Spells")
                        .HasForeignKey("DamageType")
                        .IsRequired()
                        .HasConstraintName("fk_SPELLS_E_DAMAGE_TYPES1");

                    b.Navigation("DamageDie");

                    b.Navigation("DamageTypeNavigation");
                });

            modelBuilder.Entity("Model.Entities.Weapon", b =>
                {
                    b.HasOne("Model.Entities.Dicethrow", "DamageDie")
                        .WithMany("Weapons")
                        .HasForeignKey("DamageDieId")
                        .IsRequired()
                        .HasConstraintName("fk_WEAPONS_DICETHROWS1");

                    b.HasOne("Model.Entities.EDamageType", "DamageTypeNavigation")
                        .WithMany("Weapons")
                        .HasForeignKey("DamageType")
                        .IsRequired()
                        .HasConstraintName("fk_WEAPONS_E_DAMAGE_TYPES1");

                    b.HasOne("Model.Entities.Item", "WeaponNavigation")
                        .WithOne("Weapon")
                        .HasForeignKey("Model.Entities.Weapon", "WeaponId")
                        .IsRequired()
                        .HasConstraintName("fk_WEAPONS_ITEMS1");

                    b.HasOne("Model.Entities.EWeaponType", "WeaponTypeNavigation")
                        .WithMany("Weapons")
                        .HasForeignKey("WeaponType")
                        .IsRequired()
                        .HasConstraintName("fk_WEAPONS_E_WEAPON_TYPES1");

                    b.Navigation("DamageDie");

                    b.Navigation("DamageTypeNavigation");

                    b.Navigation("WeaponNavigation");

                    b.Navigation("WeaponTypeNavigation");
                });

            modelBuilder.Entity("RaceHasTrait", b =>
                {
                    b.HasOne("Model.Entities.Race", null)
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .IsRequired()
                        .HasConstraintName("fk_TRAITS_has_RACES_RACES1");

                    b.HasOne("Model.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .IsRequired()
                        .HasConstraintName("fk_TRAITS_has_RACES_TRAITS1");
                });

            modelBuilder.Entity("RacesHasELanguage", b =>
                {
                    b.HasOne("Model.Entities.ELanguage", null)
                        .WithMany()
                        .HasForeignKey("LanguageName")
                        .IsRequired()
                        .HasConstraintName("fk_RACES_has_E_LANGUAGES_E_LANGUAGES1");

                    b.HasOne("Model.Entities.Race", null)
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .IsRequired()
                        .HasConstraintName("fk_RACES_has_E_LANGUAGES_RACES1");
                });

            modelBuilder.Entity("Model.Entities.Ability", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Model.Entities.Background", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Model.Entities.Character", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("CharactersHasItems");

                    b.Navigation("DeathSafe")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Class", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Model.Entities.Dicethrow", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Spells");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("Model.Entities.EAbilityName", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("Model.Entities.EArmorType", b =>
                {
                    b.Navigation("Armors");
                });

            modelBuilder.Entity("Model.Entities.EDamageType", b =>
                {
                    b.Navigation("Spells");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("Model.Entities.ESize", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("Model.Entities.ESkillName", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Model.Entities.EWeaponType", b =>
                {
                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.Navigation("Armor")
                        .IsRequired();

                    b.Navigation("CharactersHasItems");

                    b.Navigation("Weapon")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Race", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("InverseParentRace");
                });
#pragma warning restore 612, 618
        }
    }
}
